#include <stdio.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>


int gcd(int a,int b)
{
int i;
for(i=1;i<=a && i<=b;i++)
{
if(a%i==0 && b%i==0)gcd=i;
}
return gcd;
}

int lcm(int a, int b){
  return a * b / gcd(a, b);
}

int main(int argc, char** argv){
  if(argc != 2){
    printf("This program receives exactly 1 argument: the name of the fifo to be used\n");
    return 1;
  }

  mkfifo(argv[1], 0600);
  int fd_fifo = open(argv[1], O_WRONLY);
  if(fd_fifo == -1){
    printf("Failed to open fifo");
    return 0;
  }


  int a, b;
  scanf("%d", &a);
  scanf("%d", &b);
  int ans = lcm(a, b);

  write(fd_fifo, &ans, 4);
  close(fd_fifo);

  return 0;
}

//////////////////B

#include <stdio.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

int main(int argc, char** argv){
  if(argc != 2){
    printf("This program receives exactly 1 argument: the name of the fifo to be used\n");
    return 1;
  }

  int p1_2_p2[2];

  pipe(p1_2_p2);

  int k = fork();//first proces   

  if(k == -1){
    printf("Failed to fork\n");
    close(p1_2_p2[0]);//closing read pipe
    close(p1_2_p2[1]);//cloasing wrtie pipe
    return 1;
  }else if(k == 0){
    close(p1_2_p2[0]);

    int fd_fifo = open(argv[1], O_RDONLY);
    if(fd_fifo == -1){
      printf("Failed to open fifo\n");
      close(p1_2_p2[1]);
      exit(1);
    }

    int number = 0;
    read(fd_fifo, &number, 4);
    close(fd_fifo);
    int i;
    for(i = 1;i <= number;i++){
      if(number % i == 0){
        write(p1_2_p2[1], &i, 4);
      }
    }

    close(p1_2_p2[1]);
    exit(0);
  }
k = fork();

  if(k == -1){
    printf("Failed to fork\n");
    close(p1_2_p2[0]);
    close(p1_2_p2[1]);
    wait(0);
    return 1;
  }else if(k == 0){
    close(p1_2_p2[1]);
    int number = 0;
    while(read(p1_2_p2[0], &number, 4) > 0){
      printf("%d\n", number);
    }
    close(p1_2_p2[0]);
    exit(0);
  }

  close(p1_2_p2[0]);
  close(p1_2_p2[1]);

  wait(0);
  wait(0);

  unlink(argv[1]);

  return 0;
}
