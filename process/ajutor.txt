***********************************
validari
*********************************** 
if(argc != 2){
    printf("This program receives exactly 1 argument: the name of the fifo to be used\n");
    return 1;
  }

  int p1_2_p2[2];

  pipe(p1_2_p2);

  int k = fork();

  if(k == -1){
    printf("Failed to fork\n");
    close(p1_2_p2[0]);
    close(p1_2_p2[1]);
    return 1;
  }else if(k == 0)






  close(p1_2_p2[0]);
  close(p1_2_p2[1]);

  wait(0);
  wait(0);

***********************************
VA CITI UN NUME DE FISIER DE LA TASTATUREA
Va citi din fisier si va scrie in fifo toate cifrele din fisier
********************************

mkfifo("1fifo", 0600);
  int fd_fifo = open("1fifo", O_WRONLY);

  char filename[100];
  scanf("%s", filename);

  int fd_file = open(filename, O_RDONLY);
  if(fd_file == -1){
    printf("Failed to open file");
    return 0;
  }
char current = 0;

  int k = 0;
  while((k = read(fd_file, &current, 1))){
    if(k == -1){
      break;
    }
    if(k > 0){
      if('0' <= current && current <= '9'){
        write(fd_fifo, &current, 1);
      }
    }
  }

  close(fd_file);
  close(fd_fifo);

  return 0;

********************************
Citeste din fifo ul anterior 
*********************************

int main(){
  int p1_2_p2[2];
  pipe(p1_2_p2);

  int k = fork();

  if(k == -1){
    printf("failed to fork\n");
    close(p1_2_p2[0]);
    close(p1_2_p2[1]);
    return 1;
  }else if(k == 0){ /// P1
    close(p1_2_p2[0]);
    int fd = open("1fifo", O_RDONLY);
    if(fd == -1){
      printf("failed to open fifo\n");
      close(p1_2_p2[1]);
      exit(1);
    }
    char current = 0;
    int sum = 0;
    while((k = read(fd, &current, 1))){
      if(k == -1){
        break;
      }
      if(k > 0){
        sum += current - '0';
      }
    }
    write(p1_2_p2[1], &sum, 4);
    close(p1_2_p2[1]);
    close(fd);
    exit(0);
  }

***********************************
scrie in fifo
***********************************
mkfifo(argv[1], 0600);
  int fd_fifo = open(argv[1], O_WRONLY);
  if(fd_fifo == -1){
    printf("Failed to open fifo");
    return 0;
  }


  int a, b;
  scanf("%d", &a);
  scanf("%d", &b);
  int ans = lcm(a, b);

  write(fd_fifo, &ans, sizeof(int));
  close(fd_fifo);

 **********************************
citeste din fifo 
**************************************

 int fd_fifo = open(argv[1], O_RDONLY);
    if(fd_fifo == -1){
      printf("Failed to open fifo\n");
      close(p1_2_p2[1]);
      exit(1);
    }

    int number = 0;
    read(fd_fifo, &number, 4);
    close(fd_fifo);

***************************
scrie in pipe
****************************
write(p1_2_p2[1], &i, 4);
   close(p1_2_p2[1]);
****************************
fisier ca si argument
****************************
FILE* f = fopen(argv[1], "r");
if(f == NULL){
      printf("Failed to open file\n");
      close(p1_2_p2[1]);
      exit(1);
    }

****************************
send via fifo
****************************
int fd = open("4_fifo", O_WRONLY);
    if(fd == -1){
      printf("Failed to open fifo\n");
      exit(1);
    }

    write(fd, &value, 1);

    close(fd);

************************************
read from fifo
************************************
 int fd = open("4_fifo", O_RDONLY);

  if(fd == -1){
    printf("Failed to open fifo\n");
    return 1;
  }

  char value = 0;
  read(fd, &value, 1);

****************************
citeste din pipe
****************************
read(p1_2_p2[0], &number, sizeof(int));
    close(p1_2_p2[0]);


****************************

****************************
