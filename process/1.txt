//Scrieti 2 programe c, A si B. Programul A va citi de la tastatura un nume de
//fisier. Programul A va citi din fisier si va scrie in fifo toate cifrele din
//fisier.
//Probramul B va creea 2 procese P1 si P2. P1 va citi cifrele din fifo-ul
//mentionat anterior si va calcula suma acestora, pe care o va trimite prin
//pipe catre P2, care va afisa pe ecran divizorii numarului acestuia.
//Numele fifo-ului va fi dat ca argument in linia de comanda in ambele
//programe. Programul A va creea fifo-ul si programul B va sterge fifo-ul.
//Ambele programe terbuie compilate cu gcc -Wall -g fara erori sau warninguri.
//Ambele programe trebuie sa ruleze fara memory leaks, erori de context sau
//procese zombie.

#include <stdio.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char** argv){
  mkfifo("1fifo", 0600);
  int fd_fifo = open("1fifo", O_WRONLY);//scrie in fisier

  char filename[100];
  scanf("%s", filename);//citeste din tastatura numele fisierului

  int fd_file = open(filename, O_RDONLY);
  if(fd_file == -1){
    printf("Failed to open file");
    return 0;
  }


  char current = 0;

  int k = 0;
  while((k = read(fd_file, &current, 1))){
    if(k == -1){
      break;
    }
    if(k > 0){
      if('0' <= current && current <= '9'){
        write(fd_fifo, &current, 1);
      }
    }
  }

  close(fd_file);
  close(fd_fifo);

  return 0;
}
//////////////////B
#include <stdio.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

int main(){
  int p1_2_p2[2];
  pipe(p1_2_p2);

  int k = fork();

  if(k == -1){
    printf("failed to fork\n");
    close(p1_2_p2[0]);
    close(p1_2_p2[1]);
    return 1;
  }else if(k == 0){ /// P1
    close(p1_2_p2[0]);
    int fd = open("1fifo", O_RDONLY);
    if(fd == -1){
      printf("failed to open fifo\n");
      close(p1_2_p2[1]);
      exit(1);
    }
    char current = 0;
    int sum = 0;
    while((k = read(fd, &current, 1))){
      if(k == -1){
        break;
      }
      if(k > 0){
        sum += current - '0';
      }
    }
    write(p1_2_p2[1], &sum, 4);
    close(p1_2_p2[1]);
    close(fd);
    exit(0);
  }

  k = fork();

  if(k == -1){
    printf("failed to fork\n");
    close(p1_2_p2[0]);
    close(p1_2_p2[1]);
   wait(0);
    return 1;
  }else if(k == 0){ /// P2
    close(p1_2_p2[1]);
    int sum = 0;
    read(p1_2_p2[0], &sum, 4);
    close(p1_2_p2[0]);
   int i;
   for(i = 1;i <= sum;i++){
      if(sum % i == 0){
        printf("divisor %d\n", i);
      }
    }
    close(p1_2_p2[1]);
    exit(0);
  }

  close(p1_2_p2[0]);
  close(p1_2_p2[1]);

  wait(0);
  wait(0);
  unlink("1_fifo");
  return 0;
}
             